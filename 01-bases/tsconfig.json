{
  "compilerOptions": {
    /* Visita https://aka.ms/tsconfig para leer más sobre este archivo */

    /* Proyectos */
    // "incremental": true,                              /* Guardar archivos .tsbuildinfo para permitir la compilación incremental de proyectos. */
    // "composite": true,                                /* Habilitar restricciones que permitan que un proyecto TypeScript se utilice con referencias de proyecto. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Especificar la ruta al archivo de compilación incremental .tsbuildinfo. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Deshabilitar la preferencia de archivos de origen en lugar de archivos de declaración al hacer referencia a proyectos compuestos. */
    // "disableSolutionSearching": true,                 /* Excluir un proyecto de la comprobación de referencia a múltiples proyectos al editar. */
    // "disableReferencedProjectLoad": true,             /* Reducir el número de proyectos cargados automáticamente por TypeScript. */

    /* Lenguaje y Entorno */
    "target": "es2016",                                  /* Establecer la versión del lenguaje JavaScript para el JavaScript emitido e incluir declaraciones de bibliotecas compatibles. */
    // "lib": [],                                        /* Especificar un conjunto de archivos de declaración de bibliotecas agrupadas que describen el entorno de ejecución objetivo. */
    // "jsx": "preserve",                                /* Especificar el código JSX generado. */
    // "experimentalDecorators": true,                   /* Habilitar el soporte experimental para los decoradores de borrador del TC39 de la etapa 2. */
    // "emitDecoratorMetadata": true,                    /* Emitir metadatos de tipo de diseño para declaraciones decoradas en archivos de origen. */
    // "jsxFactory": "",                                 /* Especificar la función de fábrica JSX utilizada al apuntar a la emisión de JSX de React, por ejemplo, 'React.createElement' o 'h'. */
    // "jsxFragmentFactory": "",                         /* Especificar la referencia de Fragmento JSX utilizada para fragmentos al apuntar a la emisión de JSX de React, por ejemplo, 'React.Fragment' o 'Fragment'. */
    // "jsxImportSource": "",                            /* Especificar el módulo que se utilizará para importar las funciones de fábrica JSX al usar 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Especificar el objeto invocado para 'createElement'. Esto solo se aplica cuando se apunta a la emisión de 'react' JSX. */
    // "noLib": true,                                    /* Deshabilitar la inclusión de cualquier archivo de biblioteca, incluido el lib.d.ts predeterminado. */
    // "useDefineForClassFields": true,                  /* Emitir campos de clase compatibles con el estándar ECMAScript. */
    // "moduleDetection": "auto",                        /* Controlar qué método se utiliza para detectar archivos JS de formato de módulo. */

    /* Módulos */
    "module": "commonjs",                                /* Especificar qué código de módulo se genera. */
    // "rootDir": "./",                                  /* Especificar la carpeta raíz dentro de tus archivos de origen. */
    // "moduleResolution": "node",                       /* Especificar cómo TypeScript busca un archivo a partir de un especificador de módulo dado. */
    // "baseUrl": "./",                                  /* Especificar el directorio base para resolver nombres de módulos no relativos. */
    // "paths": {},                                      /* Especificar un conjunto de entradas que reasignen importaciones a ubicaciones de búsqueda adicionales. */
    // "rootDirs": [],                                   /* Permitir que varias carpetas se traten como una sola al resolver módulos. */
    // "typeRoots": [],                                  /* Especificar varias carpetas que actúan como './node_modules/@types'. */
    // "types": [],                                      /* Especificar nombres de paquetes de tipo que se incluirán sin ser referenciados en un archivo de origen. */
    // "allowUmdGlobalAccess": true,                     /* Permitir acceder a globales UMD desde módulos. */
    // "moduleSuffixes": [],                             /* Lista de sufijos de nombre de archivo para buscar al resolver un módulo. */
    // "resolveJsonModule": true,                        /* Habilitar la importación de archivos .json. */
    // "noResolve": true,                                /* Prohibir 'importaciones', 'require' o '<reference>' que aumenten el número de archivos que TypeScript debe agregar a un proyecto. */

    /* Soporte de JavaScript */
    // "allowJs": true,                                  /* Permitir que los archivos JavaScript sean parte de tu programa. Usa la opción 'checkJS' para obtener errores de estos archivos. */
    // "checkJs": true,                                  /* Habilitar la generación de informes de errores en archivos JavaScript con comprobación de tipos. */
    // "maxNodeModuleJsDepth": 1,                        /* Especificar la profundidad máxima de carpeta utilizada para la comprobación de archivos JavaScript de 'node_modules'. Solo aplicable con 'allowJs'. */

    /* Emitir */
    // "declaration": true,                              /* Generar archivos .d.ts a partir de archivos TypeScript y JavaScript en tu proyecto. */
    // "declarationMap": true,                           /* Crear mapas de origen para archivos d.ts. */
    // "emitDeclarationOnly": true,                      /* Solo emitir archivos .d.ts y no archivos JavaScript. */
    // "sourceMap": true,                                /* Crear archivos de mapas de origen para los archivos JavaScript emitidos. */
    // "outFile": "./",                                  /* Especificar un archivo que agrupa todas las salidas en un solo archivo JavaScript. Si 'declaration' es true, también designa un archivo que agrupa todas las salidas .d.ts. */
    // "outDir": "./",                                   /* Especificar una carpeta de salida para todos los archivos emitidos. */
    // "removeComments": true,                           /* Deshabilitar la emisión de comentarios. */
    // "noEmit": true,                                   /* Deshabilitar la emisión de archivos en una compilación. */
    // "importHelpers": true,                            /* Permitir importar funciones auxiliares desde tslib una vez por proyecto, en lugar de incluirlas por archivo. */
    // "importsNotUsedAsValues": "remove",               /* Especificar el comportamiento de emisión/comprobación para las importaciones que solo se utilizan para tipos. */
    // "downlevelIteration": true,                       /* Emitir JavaScript más compatible, pero verboso y menos eficiente para la iteración. */
    // "sourceRoot": "",                                 /* Especificar la ruta raíz para que los depuradores encuentren el código fuente de referencia. */
    // "mapRoot": "",                                    /* Especificar la ubicación donde el depurador debe buscar los archivos de mapa en lugar de las ubicaciones generadas. */
    // "inlineSourceMap": true,                          /* Incluir archivos de mapas de origen dentro del JavaScript emitido. */
    // "inlineSources": true,                            /* Incluir el código fuente en los mapas de origen dentro del JavaScript emitido. */
    // "emitBOM": true,                                  /* Emitir una marca de orden de bytes (BOM) UTF-8 al principio de los archivos de salida. */
    // "newLine": "crlf",                                /* Establecer el carácter de nueva línea para los archivos emitidos. */
    // "stripInternal": true,                            /* Deshabilitar la emisión de declaraciones que tienen '@internal' en sus comentarios JSDoc. */
    // "noEmitHelpers": true,                            /* Deshabilitar la generación de funciones auxiliares personalizadas como '__extends' en la salida compilada. */
    // "noEmitOnError": true,                            /* Deshabilitar la emisión de archivos si se informan errores de comprobación de tipos. */
    // "preserveConstEnums": true,                       /* Deshabilitar el borrado de declaraciones de 'const enum' en el código generado. */
    // "declarationDir": "./",                           /* Especificar el directorio de salida para los archivos de declaración generados. */
    // "preserveValueImports": true,                     /* Conservar los valores importados no utilizados en la salida de JavaScript que, de lo contrario, se eliminarían. */

    /* Restricciones de Interoperabilidad */
    // "isolatedModules": true,                          /* Garantizar que cada archivo se pueda transpilar de forma segura sin depender de otras importaciones. */
    // "allowSyntheticDefaultImports": true,             /* Permitir 'import x from y' cuando un módulo no tiene una exportación predeterminada. */
    "esModuleInterop": true,                             /* Emitir JavaScript adicional para facilitar el soporte de la importación de módulos CommonJS. Esto habilita 'allowSyntheticDefaultImports' para la compatibilidad de tipos. */
    // "preserveSymlinks": true,                         /* Deshabilitar la resolución de enlaces simbólicos a sus rutas reales. Esto se correlaciona con la misma bandera en node. */
    "forceConsistentCasingInFileNames": true,            /* Asegurarse de que las mayúsculas y minúsculas sean correctas en las importaciones. */

    /* Comprobación de Tipos */
    "strict": true,                                      /* Habilitar todas las opciones de comprobación de tipos estrictos. */
    "noImplicitAny": true,                            /* Habilitar la generación de informes de errores para expresiones y declaraciones con un tipo 'any' implícito. */
    "strictNullChecks": true,                         /* Al comprobar tipos, tener en cuenta 'null' y 'undefined'. */
    // "strictFunctionTypes": true,                      /* Al asignar funciones, comprobar que los parámetros y los valores de retorno sean compatibles con los subtipos. */
    // "strictBindCallApply": true,                      /* Comprobar que los argumentos para los métodos 'bind', 'call' y 'apply' coincidan con la función original. */
    // "strictPropertyInitialization": true,             /* Comprobar propiedades de clase que están declaradas pero no se establecen en el constructor. */
    // "noImplicitThis": true,                           /* Habilitar la generación de informes de errores cuando 'this' tiene el tipo 'any'. */
    // "useUnknownInCatchVariables": true,               /* Variables predeterminadas de la cláusula catch como 'unknown' en lugar de 'any'. */
    // "alwaysStrict": true,                             /* Asegurarse de que siempre se emita 'use strict'. */
    // "noUnusedLocals": true,                           /* Habilitar la generación de informes de errores cuando las variables locales no se leen. */
    // "noUnusedParameters": true,                       /* Generar un error cuando un parámetro de función no se utiliza. */
    // "exactOptionalPropertyTypes": true,               /* Interpretar los tipos de propiedad opcionales como se escriben, en lugar de agregar 'undefined'. */
    // "noImplicitReturns": true,                        /* Habilitar la generación de informes de errores para los flujos de código que no devuelven explícitamente en una función. */
    // "noFallthroughCasesInSwitch": true,               /* Habilitar la generación de informes de errores para casos de caída en declaraciones switch. */
    // "noUncheckedIndexedAccess": true,                 /* Agregar 'undefined' a un tipo cuando se accede a él mediante un índice. */
    // "noImplicitOverride": true,                       /* Asegurarse de que las propiedades de sobrescritura en clases derivadas estén marcadas con el modificador 'override'. */
    // "noPropertyAccessFromIndexSignature": true,       /* Obliga a utilizar accesos indexados para claves declaradas usando un tipo indexado. */
    // "allowUnusedLabels": true,                        /* Deshabilitar la generación de informes de errores para etiquetas no utilizadas. */
    // "allowUnreachableCode": true,                     /* Deshabilitar la generación de informes de errores para código inalcanzable. */

    /* Completitud */
    // "skipDefaultLibCheck": true,                      /* Omitir la comprobación de tipos de archivos .d.ts que se incluyen con TypeScript. */
    "skipLibCheck": true                                 /* Omitir la comprobación de tipos de todos los archivos .d.ts. */
  }
}
