{
  "exclude": [
    "include-exclude/node_modules2/",
    "include-exclude/pruebas/",
  ],

  "include": [
    "interfaces",
    // "clases",
    // "ES6",
    // "include-exclude/node_modules",
  ],
  
  "compilerOptions": {

    // ::Proyectos
    
    // ?? Guardar archivos .tsbuildinfo para permitir la compilación incremental de proyectos.
    // "incremental": true,
    
    // ?? Habilitar restricciones que permitan que un proyecto TypeScript se utilice con referencias de proyecto.
    // "composite": true,
    
    // ?? Especificar la ruta al archivo de compilación incremental .tsbuildinfo.
    // "tsBuildInfoFile": "./.tsbuildinfo",
    
    // ?? Deshabilitar la preferencia de archivos de origen en lugar de archivos de declaración al hacer referencia a proyectos compuestos.
    // "disableSourceOfProjectReferenceRedirect": true,
    
    // ?? Excluir un proyecto de la comprobación de referencia a múltiples proyectos al editar.
    // "disableSolutionSearching": true,
    
    // ?? Reducir el número de proyectos cargados automáticamente por TypeScript.
    // "disableReferencedProjectLoad": true,
    

    // ::Lenguaje y Entorno
    
    // ?? Establecer la versión del lenguaje JavaScript para el JavaScript emitido e incluir declaraciones de bibliotecas compatibles.
    "target": "es2016",
    
    // ?? Especificar un conjunto de archivos de declaración de bibliotecas agrupadas que describen el entorno de ejecución objetivo.
    // "lib": [],
    
    // ?? Especificar el código JSX generado.
    // "jsx": "preserve",
                
    // ?? Habilitar el soporte experimental para los decoradores de borrador del TC39 de la etapa 2.
    // "experimentalDecorators": true,
    
    // ?? Emitir metadatos de tipo de diseño para declaraciones decoradas en archivos de origen.
    // "emitDecoratorMetadata": true,
    
    // ?? Especificar la función de fábrica JSX utilizada al apuntar a la emisión de JSX de React, por ejemplo, 'React.createElement' o 'h'.
    // "jsxFactory": "",
    
    // ?? Especificar la referencia de Fragmento JSX utilizada para fragmentos al apuntar a la emisión de JSX de React, por ejemplo, 'React.Fragment' o 'Fragment'.
    // "jsxFragmentFactory": "",
    
    // ?? Especificar el módulo que se utilizará para importar las funciones de fábrica JSX al usar 'jsx: react-jsx*'.
    // "jsxImportSource": "",
    
    // ?? Especificar el objeto invocado para 'createElement'. Esto solo se aplica cuando se apunta a la emisión de 'react' JSX.
    // "reactNamespace": "",
    
    // ?? Deshabilitar la inclusión de cualquier archivo de biblioteca, incluido el lib.d.ts predeterminado.
    // "noLib": true,
    
    // ?? Emitir campos de clase compatibles con el estándar ECMAScript.
    // "useDefineForClassFields": true,
    
    // ?? Controlar qué método se utiliza para detectar archivos JS de formato de módulo.
    // "moduleDetection": "auto",
    

    // :: Módulos
    
    // ?? Especificar qué código de módulo se genera.
    "module": "amd",
        
    // ?? Especificar la carpeta raíz dentro de tus archivos de origen.
    // "rootDir": "./",
    
    // ?? Especificar cómo TypeScript busca un archivo a partir de un especificador de módulo dado.
    // "moduleResolution": "node",
    
    // ?? Especificar el directorio base para resolver nombres de módulos no relativos.
    // "baseUrl": "./",
    
    // ?? Especificar un conjunto de entradas que reasignen importaciones a ubicaciones de búsqueda adicionales.
    // "paths": {},
    
    // ?? Permitir que varias carpetas se traten como una sola al resolver módulos.
    // "rootDirs": [],
    
    // ?? Especificar varias carpetas que actúan como './node_modules/@types'.
    // "typeRoots": [],
    
    // ?? Especificar nombres de paquetes de tipo que se incluirán sin ser referenciados en un archivo de origen.
    // "types": [],
    
    // ?? Permitir acceder a globales UMD desde módulos.
    // "allowUmdGlobalAccess": true,
     
    // ?? Lista de sufijos de nombre de archivo para buscar al resolver un módulo.
    // "moduleSuffixes": [],
    
    // ?? Habilitar la importación de archivos .json.
    // "resolveJsonModule": true,
        
    // ?? Prohibir 'importaciones', 'require' o '<reference>' que aumenten el número de archivos que TypeScript debe agregar a un proyecto.
    // "noResolve": true,
    

    // :: Soporte de JavaScript
    
    // ?? Permitir que los archivos JavaScript sean parte de tu programa. Usa la opción 'checkJS' para obtener errores de estos archivos.
    // "allowJs": true,
    
    // ?? Habilitar la generación de informes de errores en archivos JavaScript con comprobación de tipos.
    // "checkJs": true,
    
    // ?? Especificar la profundidad máxima de carpeta utilizada para la comprobación de archivos JavaScript de 'node_modules'. Solo aplicable con 'allowJs'.
    // "maxNodeModuleJsDepth": 1,
    

    // :: Emitir
    
    // ?? Generar archivos .d.ts a partir de archivos TypeScript y JavaScript en tu proyecto.
    // "declaration": true,
    
    // ?? Crear mapas de origen para archivos d.ts.
    // "declarationMap": true,
          
    // ?? Solo emitir archivos .d.ts y no archivos JavaScript.
    // "emitDeclarationOnly": true,
    
    // ?? Crear archivos de mapas de origen para los archivos JavaScript emitidos.
    "sourceMap": true,
    
    // ?? Especificar un archivo que agrupa todas las salidas en un solo archivo JavaScript. Si 'declaration' es true, también designa un archivo que agrupa todas las salidas .d.ts.
    "outFile": "./main.js",
    
    // ?? Especificar una carpeta de salida para todos los archivos emitidos.
    // "outDir": "./",
    
    // ?? Deshabilitar la emisión de comentarios.
    "removeComments": true,
            
    // ?? Deshabilitar la emisión de archivos en una compilación.
    // "noEmit": true,
    
    // ?? Permitir importar funciones auxiliares desde tslib una vez por proyecto, en lugar de incluirlas por archivo.
    // "importHelpers": true,
    
    // ?? Especificar el comportamiento de emisión/comprobación para las importaciones que solo se utilizan para tipos.
    // "importsNotUsedAsValues": "remove",
    
    // ?? Emitir JavaScript más compatible, pero verboso y menos eficiente para la iteración.
    // "downlevelIteration": true,
    
    // ?? Especificar la ruta raíz para que los depuradores encuentren el código fuente de referencia.
    // "sourceRoot": "",
    
    // ?? Especificar la ubicación donde el depurador debe buscar los archivos de mapa en lugar de las ubicaciones generadas.
    // "mapRoot": "",
    
    // ?? Incluir archivos de mapas de origen dentro del JavaScript emitido.
    // "inlineSourceMap": true,
    
    // ?? Incluir el código fuente en los mapas de origen dentro del JavaScript emitido.
    // "inlineSources": true,
    
    // ?? Emitir una marca de orden de bytes (BOM) UTF-8 al principio de los archivos de salida.
    // "emitBOM": true,
    
    // ?? Establecer el carácter de nueva línea para los archivos emitidos.
    // "newLine": "crlf",
    
    // ?? Deshabilitar la emisión de declaraciones que tienen '@internal' en sus comentarios JSDoc.
    // "stripInternal": true,
    
    // ?? Deshabilitar la generación de funciones auxiliares personalizadas como '__extends' en la salida compilada.
    // "noEmitHelpers": true,
    
    // ?? Deshabilitar la emisión de archivos si se informan errores de comprobación de tipos.
    // "noEmitOnError": true,
    
    // ?? Deshabilitar el borrado de declaraciones de 'const enum' en el código generado.
    // "preserveConstEnums": true,
    
    // ?? Especificar el directorio de salida para los archivos de declaración generados.
    // "declarationDir": "./",
    
    // ?? Conservar los valores importados no utilizados en la salida de JavaScript que, de lo contrario, se eliminarían.
    // "preserveValueImports": true,
    

    // :: Restricciones de Interoperabilidad
    
    // ?? Garantizar que cada archivo se pueda transpilar de forma segura sin depender de otras importaciones.
    // "isolatedModules": true,
    
    // ?? Permitir 'import x from y' cuando un módulo no tiene una exportación predeterminada.
    // "allowSyntheticDefaultImports": true,
    
    // ?? Emitir JavaScript adicional para facilitar el soporte de la importación de módulos CommonJS. Esto habilita 'allowSyntheticDefaultImports' para la compatibilidad de tipos.
    "esModuleInterop": true,
    
    // ?? Deshabilitar la resolución de enlaces simbólicos a sus rutas reales. Esto se correlaciona con la misma bandera en node.
    // "preserveSymlinks": true,
    
    // ?? Asegurarse de que las mayúsculas y minúsculas sean correctas en las importaciones.
    "forceConsistentCasingInFileNames": true,
    

    // :: Comprobación de Tipos
    
    // ?? Habilitar todas las opciones de comprobación de tipos estrictos.
    "strict": true,
    
    // ?? Habilitar la generación de informes de errores para expresiones y declaraciones con un tipo 'any' implícito.
    "noImplicitAny": true,
    
    // ?? Al comprobar tipos, tener en cuenta 'null' y 'undefined'.
    "strictNullChecks": true,
    
    // ?? Al asignar funciones, comprobar que los parámetros y los valores de retorno sean compatibles con los subtipos.
    // "strictFunctionTypes": true,
    
    // ?? Comprobar que los argumentos para los métodos 'bind', 'call' y 'apply' coincidan con la función original.
    // "strictBindCallApply": true,
    
    // ?? Comprobar propiedades de clase que están declaradas pero no se establecen en el constructor.
    "strictPropertyInitialization": false,
    
    // ?? Habilitar la generación de informes de errores cuando 'this' tiene el tipo 'any'.
    // "noImplicitThis": true,
    
    // ?? Variables predeterminadas de la cláusula catch como 'unknown' en lugar de 'any'.
    // "useUnknownInCatchVariables": true,
    
    // ?? Asegurarse de que siempre se emita 'use strict'.
    // "alwaysStrict": true,
    
    // ?? Habilitar la generación de informes de errores cuando las variables locales no se leen.
    // "noUnusedLocals": true,
    
    // ?? Generar un error cuando un parámetro de función no se utiliza.
    // "noUnusedParameters": true,
    
    // ?? Interpretar los tipos de propiedad opcionales como se escriben, en lugar de agregar 'undefined'.
    // "exactOptionalPropertyTypes": true,
    
    // ?? Habilitar la generación de informes de errores para los flujos de código que no devuelven explícitamente en una función.
    // "noImplicitReturns": true,
    
    // ?? Habilitar la generación de informes de errores para casos de caída en declaraciones switch.
    // "noFallthroughCasesInSwitch": true,
    
    // ?? Agregar 'undefined' a un tipo cuando se accede a él mediante un índice.
    // "noUncheckedIndexedAccess": true,
    
    // ?? Asegurarse de que las propiedades de sobrescritura en clases derivadas estén marcadas con el modificador 'override'.
    // "noImplicitOverride": true,
    
    // ?? Obliga a utilizar accesos indexados para claves declaradas usando un tipo indexado.
    // "noPropertyAccessFromIndexSignature": true,
    
    // ?? Deshabilitar la generación de informes de errores para etiquetas no utilizadas.
    // "allowUnusedLabels": true,
    
    // ?? Deshabilitar la generación de informes de errores para código inalcanzable.
    // "allowUnreachableCode": true,
    

    // :: Completitud

    // ?? Omitir la comprobación de tipos de archivos .d.ts que se incluyen con TypeScript.
    // "skipDefaultLibCheck": true,
    
    // ?? Omitir la comprobación de tipos de todos los archivos .d.ts.
    "skipLibCheck": true
    
  }
}
